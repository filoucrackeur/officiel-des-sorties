(function() {
  var ModelController, Resource, defaults, express, extend, invoke_callbacks, old_Resource_add, old_app_resource,
    __slice = [].slice;

  express = require('express');

  Resource = exports.Resource = require('express-resource-middleware');

  extend = function(dst, src, overwrite) {
    var key, val;
    if (overwrite == null) {
      overwrite = true;
    }
    if (src != null) {
      for (key in src) {
        val = src[key];
        if ((!(key in dst)) || overwrite) {
          dst[key] = val;
        }
      }
    }
    return dst;
  };

  defaults = function(dst, src) {
    var key, val;
    for (key in src) {
      val = src[key];
      if (!(key in dst)) {
        dst[key] = val;
      }
    }
    return dst;
  };

  invoke_callbacks = function(context, callbacks, req, res) {
    var callback_invoke;
    callback_invoke = function(context, callbacks, i, err, req, res) {
      var cb, l, next;
      l = callbacks.length;
      if (i >= l) {
        return;
      }
      next = function(err) {
        return callback_invoke(context, callbacks, i + 1, err);
      };
      cb = callbacks[i];
      if (cb.length >= 4) {
        return callbacks[i].call(context, err, req, res, next);
      }
      return callbacks[i].call(context, req, res, next);
    };
    return callback_invoke(context, callbacks, 0, null, req, res);
  };

  old_Resource_add = Resource.prototype.add;

  Resource.prototype.add = function(resource, opts) {
    if ((resource.controller != null) && (opts.pivotField != null)) {
      resource.controller.trace("specifying pivot field '" + opts.pivotField + "' and req field '" + this.id + "'");
      resource.controller.opts.pivot = {
        modelField: opts.pivotField,
        requestField: this.id
      };
    } else {
      console.log("no @controller or opts.pivotField");
    }
    return old_Resource_add.call(this, resource);
  };

  ModelController = (function() {

    ModelController.TOOBJECT_DEFAULT_OPTS = {
      getters: true
    };

    function ModelController(app, name, model, opts) {
      var cb, _i, _j, _len, _len1, _ref, _ref1;
      this.app = app;
      this.name = name;
      this.model = model;
      this.opts = opts;
      this.schema = this.model.schema;
      this.modelName = this.model.modelName;
      this._trace = this.opts.trace || true;
      this._default_format = this.opts.format || 'json';
      this._toObjectOpts = {};
      this._pre_serialize_cbs = [];
      this._serialize_cb = null;
      this._post_serialize_cbs = [];
      this.setSerializeCallback(this._default_serialize_cb);
      if (this.opts.pre_serialize) {
        _ref = this.opts.pre_serialize;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cb = _ref[_i];
          this.addPreSerializeCallback(cb);
        }
      }
      if (this.opts.serialize) {
        this.setSerializeCallback(this.opts.serialize);
      }
      if (this.opts.post_serialize) {
        _ref1 = this.opts.post_serialize;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          cb = _ref1[_j];
          this.addPostSerializeCallback(cb);
        }
      }
      this._computeToObjectOpts();
      this.trace(this.schema);
      if (this.name === null) {
        this.name = this.modelName.toLowerCase();
      }
      this.singular = this.name;
      if ('plural' in this.opts) {
        this.plural = this.opts.plural;
      } else {
        this.plural = this.name;
        if (this.plural[this.plural.length - 1] !== 's') {
          this.plural += 's';
        }
      }
      this.name = this.plural;
      if ('base' in opts) {
        this.base = opts.base;
      } else {
        this.base = "/";
      }
      if (this.base[0] !== '/') {
        this.base = '/' + this.base;
      }
      if (this.base[this.base.length - 1] === '/') {
        this.base = this.base.slice(0, this.base.length - 1);
      }
      this.url_prefix = this.base + "/" + this.name;
      if (this.url_prefix[0] !== '/') {
        this.url_prefix = '/' + this.url_prefix;
      }
      if (this.url_prefix[this.url_prefix.length - 1] === '/') {
        this.url_prefix = this.url_prefix.slice(0, this.url_prefix.length - 1);
      }
    }

    ModelController.prototype.getSchema = function() {
      var getPathInfo, pathInfo, pathname, schema, virtual, _ref,
        _this = this;
      schema = {};
      getPathInfo = function(pathname, path) {
        var pathInfo;
        pathInfo = {
          name: pathname,
          kind: path.instance,
          type: _this.model.schema.pathType(pathname)
        };
        if (path.instance === 'ObjectID') {
          if ('ref' in path.options) {
            pathInfo.references = path.options.ref;
          }
          if ('auto' in path.options) {
            pathInfo.auto = path.options.auto;
          }
        }
        return pathInfo;
      };
      this.model.schema.eachPath(function(pathname) {
        var path, pathInfo;
        path = _this.model.schema.path(pathname);
        pathInfo = getPathInfo(pathname, path);
        return schema[pathname] = pathInfo;
      });
      _ref = this.model.schema.virtuals;
      for (pathname in _ref) {
        virtual = _ref[pathname];
        pathInfo = getPathInfo(pathname, virtual);
        schema[pathname] = pathInfo;
      }
      return schema;
    };

    ModelController.prototype._register_schema_action = function() {
      var _this = this;
      return this.app.get("" + this.url_prefix + "/schema", function(req, res, next) {
        return res.send(_this.getSchema());
      });
    };

    ModelController.prototype._auto_load = function(req, id, fn) {
      this.trace("[auto-load] id:" + id + " res.id:" + this.resource.id);
      return this.get(id, fn);
    };

    ModelController.prototype.getTemplateContext = function(req, res, extra) {
      var context, pivot;
      context = {
        model: this.model,
        schema: this.schema,
        modelName: this.modelName,
        name: this.name,
        base: this.base,
        url_prefix: this.url_prefix,
        resource_id: this.resource.id
      };
      pivot = {};
      if (this.opts.pivot != null) {
        this.trace("we have a pivot model field: '" + this.opts.pivot.modelField + "' req field: '" + this.opts.pivot.requestField + "'");
        this.trace("req." + this.opts.pivot.requestField + " = " + req[this.opts.pivot.requestField]);
        if (this.opts.pivot.requestField in req) {
          pivot.pivot = this.opts.pivot.requestField;
          pivot.pivot_id = req[this.opts.pivot.requestField].id;
          pivot[this.opts.pivot.requestField] = this.preprocess_instance(req[this.opts.pivot.requestField]);
        }
      }
      defaults(context, pivot);
      return extend(context, extra);
    };

    ModelController.prototype.getInstanceTemplateContext = function(req, res, instance, extra) {
      var context, serialized;
      serialized = this.preprocess_instance(instance);
      context = this.getTemplateContext(req, res, {
        instance: instance,
        json: JSON.stringify(serialized),
        object: serialized
      });
      return extend(context, extra);
    };

    ModelController.prototype.getSetTemplateContext = function(req, res, instances, extra) {
      var context, serialized;
      serialized = this.preprocess_instances(instances);
      context = this.getTemplateContext(req, res, {
        instances: instances,
        json: JSON.stringify(serialized),
        objects: serialized
      });
      return extend(context, extra);
    };

    ModelController.prototype._renderTemplate = function(res, name, context) {
      var t_name;
      t_name = this.url_prefix;
      if (t_name[0] === '/') {
        t_name = t_name.slice(1);
      }
      if (t_name[t_name.length - 1] !== '/') {
        t_name = t_name + '/';
      }
      t_name += name;
      return res.render(t_name, context);
    };

    ModelController.prototype.renderTemplate = function(res, name, data, context) {
      var view, _ref,
        _this = this;
      data.view || (data.view = name);
      data.name = name;
      view = data.view;
      if (((_ref = this.opts.render_cb) != null ? _ref[view] : void 0) != null) {
        return this.opts.render_cb[view].call(this, data, context, function(ctxt) {
          return _this._renderTemplate(res, name, ctxt);
        });
      } else {
        return this._renderTemplate(res, name, context);
      }
    };

    ModelController.prototype._action_index = function(req, res, next) {
      var conditions, format, subquery,
        _this = this;
      format = req.format || this._default_format;
      this.traceAction(req, 'index', "" + this.url_prefix + " format:" + format);
      subquery = false;
      if (this.opts.pivot != null) {
        this.trace("we have a pivot model field: '" + this.opts.pivot.modelField + "' req field: '" + this.opts.pivot.requestField + "'");
        this.trace("req." + this.opts.pivot.requestField + " = " + req[this.opts.pivot.requestField]);
        if (this.opts.pivot.requestField in req) {
          this.trace("subquery on " + this.opts.pivot.modelField + " = " + req[this.opts.pivot.requestField].id);
          subquery = true;
        } else {
          this.trace("NO SUBQUERY");
        }
      }
      conditions = null;
      if (subquery) {
        conditions = {};
        conditions[this.opts.pivot.modelField] = req[this.opts.pivot.requestField].id;
        this.trace("conditions:", conditions);
      }
      return this.get_conditions(conditions, function(err, instances) {
        var ctxt;
        if (err) {
          return next(err);
        }
        if (format === 'html') {
          ctxt = _this.getSetTemplateContext(req, res, instances, {
            format: format,
            view: 'index'
          });
          return _this.renderTemplate(res, "index", {
            instances: instances
          }, ctxt);
        }
        return res.send(_this.preprocess_instances(instances));
      });
    };

    ModelController.prototype._action_new = function(req, res, next) {
      var ctxt, format, instance;
      format = req.format || this._default_format;
      this.traceAction(req, 'new', "" + this.url_prefix + "/new format:" + format);
      instance = new this.model;
      if (this.opts.pivot != null) {
        this.trace("we have a pivot model field: '" + this.opts.pivot.modelField + "' req field: '" + this.opts.pivot.requestField + "'");
        this.trace("req." + this.opts.pivot.requestField + " = " + req[this.opts.pivot.requestField]);
        if (this.opts.pivot.requestField in req) {
          if ((!this.opts.pivot.requestField in instance) || (!instance[this.opts.pivot.requestField])) {
            instance[this.opts.pivot.requestField] = req[this.opts.pivot.requestField].id;
          }
        }
      }
      if (format === 'html') {
        ctxt = this.getInstanceTemplateContext(req, res, instance, {
          format: format,
          view: 'new',
          mode: 'new'
        });
        return this.renderTemplate(res, "edit", {
          view: 'new',
          instance: instance
        }, ctxt);
      }
      return res.send(this.preprocess_instance(instance));
    };

    ModelController.prototype._action_create = function(req, res, next) {
      var format, instance,
        _this = this;
      format = req.format || this._default_format;
      this.traceAction(req, 'create', "" + this.url_prefix + " format:" + format);
      instance = new this.model();
      this.update_instance_from_body_values(req, instance);
      if (this.opts.pivot != null) {
        this.trace("we have a pivot model field: '" + this.opts.pivot.modelField + "' req field: '" + this.opts.pivot.requestField + "'");
        this.trace("req." + this.opts.pivot.requestField + " = " + req[this.opts.pivot.requestField]);
        if (this.opts.pivot.requestField in req) {
          if ((!this.opts.pivot.requestField in instance) || (!instance[this.opts.pivot.requestField])) {
            instance[this.opts.pivot.requestField] = req[this.opts.pivot.requestField].id;
          }
        }
      }
      return instance.save(function(err) {
        if (err) {
          return next(err);
        }
        console.log("created " + _this.modelName + " with id:" + instance.id);
        if (((req.body._format != null) && req.body._format === 'html') || (format === 'html')) {
          return res.redirect(_this.url_prefix + ("/" + instance.id) + ".html");
        } else {
          return res.send(_this.preprocess_instance(instance));
        }
      });
    };

    ModelController.prototype._action_show = function(req, res, next) {
      var format,
        _this = this;
      format = req.format || this._default_format;
      this.traceAction(req, 'show', "" + this.url_prefix + ":" + this.resource.id + " format:" + format);
      return this.get(this.getId(req), function(err, instance) {
        var ctxt;
        if (err) {
          return next(err);
        }
        if (format === 'html') {
          ctxt = _this.getInstanceTemplateContext(req, res, instance, {
            format: format,
            view: 'show'
          });
          return _this.renderTemplate(res, "show", {
            instance: instance
          }, ctxt);
        } else {
          return res.send(_this.preprocess_instance(instance));
        }
      });
    };

    ModelController.prototype._action_edit = function(req, res, next) {
      var format,
        _this = this;
      format = req.format || this._default_format;
      this.traceAction(req, 'edit', "" + this.url_prefix + ":" + this.resource.id + "/edit format:" + format);
      return this.get(this.getId(req), function(err, instance) {
        var ctxt;
        if (err) {
          return next(err);
        }
        if (format === 'html') {
          ctxt = _this.getInstanceTemplateContext(req, res, instance, {
            format: format,
            view: 'edit',
            mode: 'edit'
          });
          return _this.renderTemplate(res, "edit", {
            instance: instance
          }, ctxt);
        }
        return res.send(_this.preprocess_instance(instance));
      });
    };

    ModelController.prototype._action_update = function(req, res, next) {
      var id,
        _this = this;
      id = this.getId(req);
      this.traceAction(req, 'update', "" + this.url_prefix + ":" + this.resource.id);
      return this.get(id, function(err, instance) {
        if (err) {
          return next(err);
        }
        console.log("REQUEST files:");
        console.log(req.files);
        _this.update_instance_from_body_values(req, instance);
        return instance.save(function(err) {
          if (err) {
            return next(err);
          }
          console.log("updated " + _this.modelName + " with id:" + id);
          if ((req.body._format != null) && req.body._format === 'html') {
            return res.redirect(_this.url_prefix + ("/" + instance.id) + ".html");
          } else {
            return res.send(_this.preprocess_instance(instance));
          }
        });
      });
    };

    ModelController.prototype._action_destroy = function(req, res, next) {
      var id,
        _this = this;
      id = this.getId(req);
      this.traceAction(req, 'destroy', "" + this.url_prefix + ":" + this.resource.id);
      return this.get(id, function(err, instance) {
        if (err) {
          return next(err);
        }
        return instance.remove(function(err) {
          if (err) {
            return next(err);
          }
          console.log("removed " + _this.modelName + " with id:" + id);
          return res.send('');
        });
      });
    };

    ModelController.prototype.getExpressResourceActions = function(actions) {
      var controller;
      actions = actions || {};
      controller = this;
      extend(actions, {
        index: function() {
          return controller._action_index.apply(controller, arguments);
        },
        "new": function() {
          return controller._action_new.apply(controller, arguments);
        },
        create: function() {
          return controller._action_create.apply(controller, arguments);
        },
        show: function() {
          return controller._action_show.apply(controller, arguments);
        },
        edit: function() {
          return controller._action_edit.apply(controller, arguments);
        },
        update: function() {
          return controller._action_update.apply(controller, arguments);
        },
        destroy: function() {
          return controller._action_destroy.apply(controller, arguments);
        },
        load: function() {
          return controller._auto_load.apply(controller, arguments);
        }
      });
      return actions;
    };

    ModelController.prototype.addPreSerializeCallback = function(cb) {
      this._pre_serialize_cbs.push(cb);
      return this;
    };

    ModelController.prototype.setSerializeCallback = function(cb) {
      this._serialize_cb = cb;
      return this;
    };

    ModelController.prototype.addPostSerializeCallback = function(cb) {
      this._post_serialize_cbs.push(cb);
      return this;
    };

    ModelController.prototype.trace = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this._trace) {
        args = args || [];
        args.unshift("[" + this.modelName + "] ");
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.log === "function") {
            console.log.apply(console, args);
          }
        }
      }
      return this;
    };

    ModelController.prototype.traceAction = function(req, actionName, url) {
      var id, msg;
      if (this._trace) {
        msg = "[" + this.modelName + "/" + actionName + "] " + req.method + " " + url;
        if ((req.params != null) && (this.resource.id || req.params)) {
          id = req.params[this.resource.id];
          if (id) {
            msg = msg + (" id:" + id);
          }
        }
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.log === "function") {
            console.log(msg);
          }
        }
      }
      return this;
    };

    ModelController.prototype.getId = function(req) {
      return req.params[this.resource.id];
    };

    ModelController.prototype._computeToObjectOpts = function() {
      this._toObjectOpts = {};
      if ((this.opts.toObject != null) && this.opts.toObject) {
        this._toObjectOpts = this.opts.toObject;
      }
      this._toObjectOpts = defaults(this._toObjectOpts, ModelController.TOOBJECT_DEFAULT_OPTS);
      return this;
    };

    ModelController.prototype._default_serialize_cb = function(instance, toObjectOpts) {
      return instance.toObject(toObjectOpts);
    };

    ModelController.prototype.preprocess_instance = function(instance) {
      var req, res;
      req = {
        instance: instance,
        toObject: this._toObjectOpts
      };
      res = {};
      invoke_callbacks(this, this._pre_serialize_cbs, req, res);
      req.object = this._serialize_cb(req.instance, req.toObject);
      invoke_callbacks(this, this._post_serialize_cbs, req, res);
      return req.object;
    };

    ModelController.prototype.preprocess_instances = function(instances) {
      var _this = this;
      return instances.map(function(instance) {
        return _this.preprocess_instance(instance);
      });
    };

    ModelController.prototype.get = function(id, fn) {
      var _this = this;
      return this.model.findById(id, function(err, item) {
        var errtext;
        if ((!err) && item) {
          return fn(null, item);
        } else {
          errtext = err != null ? "\nError: " + err : "";
          return fn(new Error("" + _this.modelName + " with id:" + id + " does not exist." + errtext));
        }
      });
    };

    ModelController.prototype.get_conditions = function(conditions, fn) {
      var cb,
        _this = this;
      cb = function(err, items) {
        var errtext;
        if ((!err) && (items != null)) {
          return fn(null, items);
        } else {
          errtext = err != null ? "\nError: " + err : "";
          return fn(new Error("Can't retrieve list of " + _this.modelName + "." + errtext));
        }
      };
      if (conditions != null) {
        return this.model.find(conditions, cb);
      }
      return this.model.find(cb);
    };

    ModelController.prototype.get_all = function(fn) {
      return this.get_conditions(null, fn);
    };

    ModelController.prototype.get_body_instance_values = function(req, defaults) {
      var iv,
        _this = this;
      iv = extend({}, defaults, false);
      this.model.schema.eachPath(function(pathname) {
        var path, rf;
        path = _this.model.schema.path(pathname);
        if (pathname in req.body) {
          return iv[pathname] = req.body[pathname];
        } else if ((req.files != null) && (pathname in req.files)) {
          rf = req.files[pathname];
          _this.trace("getting file name:" + rf.name + " length:" + rf.length + " filename:" + rf.filename + " mime:" + rf.mime);
          return iv[pathname] = {
            file: req.files[pathname]
          };
        }
      });
      return iv;
    };

    ModelController.prototype.update_instance_from_body_values = function(req, instance) {
      var _this = this;
      this.model.schema.eachPath(function(pathname) {
        var path, rf;
        path = _this.model.schema.path(pathname);
        if (pathname in req.body) {
          return instance.set(pathname, req.body[pathname]);
        } else if ((req.files != null) && (pathname in req.files)) {
          rf = req.files[pathname];
          _this.trace("getting file name:" + rf.name + " length:" + rf.length + " filename:" + rf.filename + " mime:" + rf.mime);
          return instance.set("" + pathname + ".file", req.files[pathname]);
        }
      });
      return instance;
    };

    return ModelController;

  })();

  exports.ModelController = ModelController;

  old_app_resource = express.HTTPServer.prototype.resource;

  express.HTTPServer.prototype.resource = express.HTTPSServer.prototype.resource = function(name, actions, opts) {
    var controller, model, o_actions, o_name, o_opts, res;
    o_name = name;
    o_actions = actions;
    o_opts = opts;
    if ("object" === typeof name) {
      opts = actions;
      actions = name;
      name = null;
    }
    opts = opts || {};
    actions = actions || {};
    if (!(('model' in opts) || ('model' in actions))) {
      return old_app_resource.call(this, o_name, o_actions, o_opts);
    }
    if ('model' in opts) {
      model = opts.model;
    } else if ('model' in actions) {
      model = actions.model;
      delete actions['model'];
    }
    controller = opts.controller || new ModelController(this, name, model, opts);
    controller._register_schema_action();
    res = old_app_resource.call(this, controller.name, controller.getExpressResourceActions(), opts);
    controller.resource = res;
    res.controller = controller;
    return res;
  };

}).call(this);
